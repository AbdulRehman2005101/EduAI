generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId   String   @unique // Add Clerk user ID
  name          String
  email         String   @unique
  password      String?  // Make optional since Clerk handles auth
  role          Role     @default(STUDENT)
  avatar        String?
  coursesTaught Course[] @relation("TeacherCourses")

  taCourseIds      String[]      @db.ObjectId
  coursesAsTA      Course[]      @relation("TACourses", fields: [taCourseIds], references: [id])
  chatMessages     ChatMessage[] @relation("UserChatMessages")
  studentCourseIds String[]      @db.ObjectId
  coursesEnrolled  Course[]      @relation("StudentCourses", fields: [studentCourseIds], references: [id])
  lecturesCreated  Lecture[]     @relation("LectureAuthor")
  chatBots         ChatBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  classCode   String @unique

  teacherId String @db.ObjectId
  teacher   User   @relation("TeacherCourses", fields: [teacherId], references: [id])

  taIds String[] @db.ObjectId
  tas   User[]   @relation("TACourses", fields: [taIds], references: [id])

  studentIds    String[]       @db.ObjectId
  students      User[]         @relation("StudentCourses", fields: [studentIds], references: [id])
  lectures      Lecture[]
  assignments   Assignment[]
  chatMessages  ChatMessage[]  @relation("CourseChatMessages")
  announcements Announcement[]
  chatBots      ChatBot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lecture {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String
  materials   Json // Store array of materials
  uploadDate  DateTime @default(now())
  authorId    String   @db.ObjectId
  author      User     @relation("LectureAuthor", fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String   @db.ObjectId
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String
  dueDate     DateTime
  materials   String[]
  maxScore    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId String   @db.ObjectId
  course   Course   @relation(fields: [courseId], references: [id])
  title    String
  content  String
  date     DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  course    Course   @relation("CourseChatMessages", fields: [courseId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation("UserChatMessages", fields: [authorId], references: [id])
  content   String
  timestamp DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatBot {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String @db.ObjectId
  course    Course @relation(fields: [courseId], references: [id])
  studentId String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])
  messages  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  TEACHER
  STUDENT
  TA
}